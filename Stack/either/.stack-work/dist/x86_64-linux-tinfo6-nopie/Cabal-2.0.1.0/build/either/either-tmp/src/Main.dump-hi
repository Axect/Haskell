
==================== FINAL INTERFACE ====================
2018-04-04 07:34:29.997907839 UTC

interface main:Main 8022
  interface hash: 0901b9bd78094342d389a2513abbaaf6
  ABI hash: c18de494533cc09cb82b8ba8c598d02e
  export-list hash: d4b00ad09c84cfae13908395081329d2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fca567e42241a5e04aabd47e0dddc5bf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.safeDiv
  Main.ESInt
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Either d7dae5d9bf298dee616e465c14b5d60e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
7bb4eb1dfb00b4a22b164f26c3e491c9
  type ESInt = Data.Either.Either GHC.Base.String GHC.Types.Int
6c620b8ab1aa46e4aacb795aa2233ebb
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
a36a9102f519e75b63cf962ca26d9414
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv }) -}
deb7944967a66051a4c267a7fd7665bf
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main13
                   Main.main11) -}
4d3bc4d6f4b5f4dd6fe643b3c86e7f2f
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Data.Either.$fShowEither2
                   Main.main12) -}
6ecc4f2d921fbcb2ff6a428280b6f203
  main12 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        11#
                        5#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
c0a5f3b7875b2999085d3666b58b7072
  main13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Safe Division : 10/2 = "#) -}
3646915c353725f701bd431746e21eed
  main14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
2321db661ff0454e5b3555be88972e05
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main9
                   Main.main3) -}
1d0dc1b875e63ff5996b7554acfb3557
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Data.Either.$fShowEither4
                   Main.main4) -}
a592c4c9a5d8af02750958f08bd6996c
  main4 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main5) -}
04b6d091b0a95362cddece05485c4895
  main5 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString Main.main7 Main.main6) -}
f1308285557f1f92cd99af68be3ab4be
  main6 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
18c04e9d8edfa079fec5d0cacafb5244
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
9352dcfe33842dcdbc939dfd03d0f92c
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Zero division Error!"#) -}
10323412920c21c93cf0300bf200a525
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Safe Division : 10/0 = "#) -}
812154e4ed724b39a9586a717b792a12
  safeDiv :: Main.ESInt -> Main.ESInt -> Main.ESInt
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (ds :: Data.Either.Either
                            GHC.Base.String GHC.Types.Int)
                   (ds1 :: Main.ESInt) ->
                 case ds of wild {
                   Data.Either.Left e -> wild
                   Data.Either.Right ipv
                   -> case ds1 of wild1 {
                        Data.Either.Left e -> wild1
                        Data.Either.Right ipv1
                        -> case ipv1 of wild2 { GHC.Types.I# x ->
                           case x of wild3 {
                             DEFAULT
                             -> Data.Either.Right
                                  @ GHC.Base.String
                                  @ GHC.Types.Int
                                  (case ipv of ww { GHC.Types.I# ww1 ->
                                   case wild3 of wild4 {
                                     DEFAULT
                                     -> case GHC.Classes.divInt# ww1 wild4 of ww4 { DEFAULT ->
                                        GHC.Types.I# ww4 }
                                     -1#
                                     -> case ww1 of wild5 {
                                          DEFAULT
                                          -> case GHC.Classes.divInt# wild5 -1# of ww4 { DEFAULT ->
                                             GHC.Types.I# ww4 }
                                          -9223372036854775808#
                                          -> case GHC.Real.overflowError
                                             ret_ty GHC.Types.Int
                                             of {} } } })
                             0# -> Main.safeDiv1 } } } }) -}
3fdd9335add9d591eb864b6753999ad8
  safeDiv1 :: Data.Either.Either [GHC.Types.Char] GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ [GHC.Types.Char]
                   @ GHC.Types.Int
                   Main.main7) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

