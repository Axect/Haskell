
==================== FINAL INTERFACE ====================
2018-04-10 06:48:18.72313248 UTC

interface main:Main 8022
  interface hash: 4ef88a0d33fd6a982aab65112565139b
  ABI hash: c1e3589fb8318b5cab77cc6610d2272f
  export-list hash: 353c117cbf0d3232a2fa95827e14b1f1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4b6702bcbd65fc4aedf59942f1b2646f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addEither
  Main.main
  Main.multiplyLists
  Main.tupleMaybe
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Control.Applicative 99577a9c463ffe4790a1d37547a345bd
import  -/  base-4.10.1.0:Data.Either d7dae5d9bf298dee616e465c14b5d60e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
7307f50afe2541377323fcb64adb92ac
  addEither ::
    GHC.Num.Num a =>
    Data.Either.Either c a
    -> Data.Either.Either c a -> Data.Either.Either c a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><L,1*U>,
     Unfolding: (\ @ a
                   @ c
                   ($dNum :: GHC.Num.Num a)
                   (x :: Data.Either.Either c a)
                   (y :: Data.Either.Either c a) ->
                 case x of wild {
                   Data.Either.Left x1 -> wild
                   Data.Either.Right y1
                   -> case y of wild1 {
                        Data.Either.Left x1 -> wild1
                        Data.Either.Right y2
                        -> Data.Either.Right @ c @ a (GHC.Num.+ @ a $dNum y1 y2) } }) -}
1012d9f264fe1ba4de0433be7cf874c1
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b9f3f7b18f9ea258b3b3631a5de0b911
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main35
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main29
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.[] @ GHC.Types.Char)
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main27
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main25
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main17
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.[] @ GHC.Types.Char)
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main15
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        GHC.Show.$fShowMaybe4
                        GHC.Types.True
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.[] @ GHC.Types.Char)
                        GHC.Types.True
                        ipv16 of ds10 { (#,#) ipv18 ipv19 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main13
                        GHC.Types.True
                        ipv18 of ds11 { (#,#) ipv20 ipv21 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main11
                        GHC.Types.True
                        ipv20 of ds12 { (#,#) ipv22 ipv23 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main9
                        GHC.Types.True
                        ipv22 of ds13 { (#,#) ipv24 ipv25 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main7
                        GHC.Types.True
                        ipv24 of ds14 { (#,#) ipv26 ipv27 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv26 } } } } } } } } } } } } } }) -}
a4dfcf97f9533f7716f4ca44abd25e3a
  main10 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        11#
                        110#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
ddfa5ccf48be6b562b15c8e8f2feac3f
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main12) -}
96a0f0f03639c867dc8d237966912518
  main12 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Right 10 -> Right 100 -> Right 110"#) -}
0b7413c37211731fdaab09aa4065e180
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main14) -}
2024596835cb3be9b3e6cbe5e1892c5b
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Adding Either"#) -}
078020f9cdbea53e0c1736dfdbd37261
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main16) -}
40cb27a19ec83888608cad36f03146b0
  main16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Just 10 -> Nothing -> Nothing"#) -}
25141ae5b3d33d1c4c2d29e9a91f0f1b
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe1
                   Main.main18) -}
d685174a05d7887475eaf4b10aac2ef6
  main18 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   Main.main19) -}
09cf298a14bb240c1a026b4a93023a13
  main19 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Show.$w$cshowsPrec4
                        0#
                        Main.main24
                        Main.main20 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww4 }) -}
614e427ddb56c1576dde018a34e08249
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Data.Either.$fShowEither4
                   Main.main3) -}
c35da1ed8526507e8be1b37763feb2bf
  main20 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.showList__1
                   Main.main21) -}
07212f06d8fa9cfd8d9bc1db9413960f
  main21 :: GHC.Base.String
  {- Unfolding: (GHC.Show.$fShow(,)_$sgo1
                   Main.main23
                   Main.main22
                   (GHC.Types.[] @ GHC.Show.ShowS)) -}
1811ef89c2f870e758de3b08e6b2decf
  main22 :: GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: (\ (eta :: GHC.Base.String)[OneShot] ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Show.showLitString
                      (GHC.CString.unpackCString# Main.main6)
                      (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta))) -}
af370907bcf31619e3ace3d5fe06b2c5
  main23 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dd09eebc63b4d79f16d48ebf4269e50c
  main24 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
1bf781ed4bfb266e8b2c6294b927474f
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main26) -}
3935577959d0080418d28314a6649108
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Just 10 -> Just \"String\" -> Just (10, \"String\")"#) -}
5dda1bb0ddff48603dc199ce33b94833
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main28) -}
c9acac0e7b40df3ad0b33285691ce34f
  main28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tuple of Maybes"#) -}
d7f7fdb4e5041002c3eb8acd8dddff4e
  main29 :: GHC.Base.String
  {- Unfolding: (GHC.Show.$fShowInteger_$cshowList
                   (Main.main_$smultiplyLists
                      (GHC.Enum.enumDeltaToInteger1 Main.main34 Main.main33)
                      Main.main30)
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4c14561d23045dfa99d4d6b96c5ce009
  main3 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main4) -}
0ad732d9341fd064b51a8a5f0e554ec9
  main30 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (GHC.Enum.enumDeltaToInteger1
                   Main.main32
                   Main.main31) -}
256968a535dd2e7c92b3c3a6a03665d5
  main31 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (13) -}
028740f9ccfe7b934674aa1e0c60a44e
  main32 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (11) -}
430e321b6237cc3df0c7d468e327baa4
  main33 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
8eb062ed624f98dc272e153e53eb722c
  main34 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
dabaf3f4356c19f7875deccaa097ab0a
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main36) -}
836b6d3ba7265cf723ef1a2875be5275
  main36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Multiply Lists"#) -}
088193d443352c261e03618ea9c3c59b
  main37 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4fec0d4034620718312d357ffcfde573
  main4 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackCString# Main.main6)
                   Main.main5) -}
d83c90f3cdb9308e876ad07834ce9de9
  main5 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94c0463e7afd0d810783fa04ef08a534
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("String"#) -}
72c1da51c38bc7c9606545ff5bcacf01
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
96559c5c06f3f088e1fa973ef2d234ff
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Left String -> Right 10 -> Left String"#) -}
11bac9df13b091b199990acdbfaee08f
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Data.Either.$fShowEither2
                   Main.main10) -}
c88233d6e9ba95ed08e07b525bdb278d
  main_$smultiplyLists ::
    [GHC.Integer.Type.Integer]
    -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (xs :: [GHC.Integer.Type.Integer])
                   (ys :: [GHC.Integer.Type.Integer]) ->
                 letrec {
                   go :: [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Integer.Type.Integer]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Integer.Type.Integer
                       : y ys1
                       -> let {
                            ys2 :: [GHC.Integer.Type.Integer] = go ys1
                          } in
                          letrec {
                            go1 :: [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [GHC.Integer.Type.Integer]) ->
                              case ds1 of wild1 {
                                [] -> ys2
                                : y1 ys3
                                -> GHC.Types.:
                                     @ GHC.Integer.Type.Integer
                                     (GHC.Integer.Type.timesInteger y y1)
                                     (go1 ys3) }
                          } in
                          go1 ys }
                 } in
                 go xs) -}
5dcbd419973d744f898eca9d24da9fc4
  multiplyLists :: GHC.Num.Num a => [a] -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C(U)),A,A,A,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (xs :: [a])
                   (ys :: [a]) ->
                 letrec {
                   go :: [a] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : y ys1
                       -> let {
                            ys2 :: [a] = go ys1
                          } in
                          let {
                            ds1 :: a -> a = GHC.Num.* @ a $dNum y
                          } in
                          letrec {
                            go1 :: [a] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds2 :: [a]) ->
                              case ds2 of wild1 {
                                [] -> ys2 : y1 ys3 -> GHC.Types.: @ a (ds1 y1) (go1 ys3) }
                          } in
                          go1 ys }
                 } in
                 go xs) -}
3beb99e5092e86b55d0b2660aa05015b
  tupleMaybe ::
    GHC.Base.Maybe a -> GHC.Base.Maybe b -> GHC.Base.Maybe (a, b)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (x :: GHC.Base.Maybe a) (y :: GHC.Base.Maybe b) ->
                 case x of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (a, b)
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ (a, b)
                        GHC.Base.Just a2 -> GHC.Base.Just @ (a, b) (a1, a2) } }) -}
"SPEC multiplyLists @ Integer" forall ($dNum :: GHC.Num.Num
                                                  GHC.Integer.Type.Integer)
  Main.multiplyLists @ GHC.Integer.Type.Integer $dNum
  = Main.main_$smultiplyLists
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

