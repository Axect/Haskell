
==================== FINAL INTERFACE ====================
2018-04-03 03:28:52.815335445 UTC

interface main:Main 8022
  interface hash: 35fb753069f146f39d3a0e26ff286424
  ABI hash: d5b67d89ccecb1ba8fed9fd962d3793e
  export-list hash: 7f8a4132b919fcdbb5a8458394a7748e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5f357100cfc65fb8c79f4d71e35db10a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.bfTransverse
  Main.dfTransverse
  Main.empty
  Main.main
  Main.node
  Main.sampleTree
  Main.singleton
  Main.BinaryTree{Main.BinaryTree Main.Leaf left right val}
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
9c3a08ee46f510912a981874edbbbca0
  $fShowBinaryTree ::
    GHC.Show.Show a => GHC.Show.Show (Main.BinaryTree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Main.BinaryTree a)
                  (Main.$fShowBinaryTree_$cshowsPrec @ a v)
                  (Main.$fShowBinaryTree_$cshow @ a v)
                  (Main.$fShowBinaryTree_$cshowList @ a v) -}
54ae4a1ef577351ae09dbc0df4ec805b
  $fShowBinaryTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9c3a08ee46f510912a981874edbbbca0
  $fShowBinaryTree_$cshow ::
    GHC.Show.Show a => Main.BinaryTree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Main.BinaryTree a) ->
                 Main.$fShowBinaryTree_$cshowsPrec
                   @ a
                   $dShow
                   Main.$fShowBinaryTree1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9c3a08ee46f510912a981874edbbbca0
  $fShowBinaryTree_$cshowList ::
    GHC.Show.Show a => [Main.BinaryTree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Main.BinaryTree a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Main.BinaryTree a)
                   (Main.$fShowBinaryTree_$cshowsPrec
                      @ a
                      $dShow
                      Main.$fShowBinaryTree1)
                   eta
                   eta1) -}
9c3a08ee46f510912a981874edbbbca0
  $fShowBinaryTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Main.BinaryTree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><L,1*U(U)><S,1*U> -}
05eb63a183e9d9bb8223d73648b2e551
  $tc'BinaryTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6389238338025953602##
                   17099785297228689662##
                   Main.$trModule
                   Main.$tc'BinaryTree2
                   1#
                   Main.$tc'BinaryTree1) -}
e0446047cdf04809d2bac6ae6b3d251b
  $tc'BinaryTree1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
234bdb90dab759b641138ac87532c8fe
  $tc'BinaryTree2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'BinaryTree3) -}
b52ad7ea4b4aea675af8df876a653918
  $tc'BinaryTree3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryTree"#) -}
96fa2a1a83c7666ce751d8e19550643b
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2429462324830996089##
                   3103893512769260469##
                   Main.$trModule
                   Main.$tc'Leaf2
                   1#
                   Main.$tc'Leaf1) -}
570b07da3b9f9c87aa3738736f85955a
  $tc'Leaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d5b22d3738756ab42550e1faac4f16e7
  $tc'Leaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Leaf3) -}
edba2c2e55e89259dd2cb82805d71d6a
  $tc'Leaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Leaf"#) -}
8e8bf39b6520148deea0a6c6be95c988
  $tcBinaryTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8908913770609998515##
                   9235449054960460774##
                   Main.$trModule
                   Main.$tcBinaryTree1
                   0#
                   GHC.Types.krep$*Arr*) -}
4d367f94551d4479dbdf7c262e0856df
  $tcBinaryTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcBinaryTree2) -}
d5e5804f93ec5a5a7562908df6befa5e
  $tcBinaryTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BinaryTree"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
9c3a08ee46f510912a981874edbbbca0
  data BinaryTree a
    = Leaf
    | BinaryTree {left :: Main.BinaryTree a,
                  val :: a,
                  right :: Main.BinaryTree a}
85522b15b938dc328f6e47735eedae20
  bfTransverse :: Main.BinaryTree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.BinaryTree a) ->
                 case ds of wild {
                   Main.Leaf -> GHC.Types.[] @ a
                   Main.BinaryTree ipv ipv1 ipv2
                   -> Main.bfTransverse1
                        @ a
                        (GHC.Types.:
                           @ (Main.BinaryTree a)
                           wild
                           (GHC.Types.[] @ (Main.BinaryTree a)))
                        (GHC.Types.[] @ (Main.BinaryTree a))
                        (GHC.Types.[] @ a) }) -}
23364e767805e9456a04a0c993a3c5b0
  bfTransverse1 ::
    [Main.BinaryTree a] -> [Main.BinaryTree a] -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
bf0e129032d0819e6e40b6c919ddcf85
  dfTransverse :: Main.BinaryTree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
50498e9f4342620a1d34118b9a7cf3e6
  empty :: Main.BinaryTree a
  {- HasNoCafRefs, Unfolding: InlineRule (0, True, True) Main.Leaf -}
9c3a08ee46f510912a981874edbbbca0
  left :: Main.BinaryTree a -> Main.BinaryTree a
  RecSel Left Main.BinaryTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.BinaryTree a) ->
                 case ds of wild {
                   Main.Leaf -> Main.left1 @ a
                   Main.BinaryTree ds1 ds2 ds3 -> ds1 }) -}
9c3a08ee46f510912a981874edbbbca0
  left1 :: Main.BinaryTree a
  {- Strictness: x -}
f936a2d91b19d911767be47ee3946d56
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d8e9e405438566495daf3585f030c899
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main9
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main7
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main5
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv4 } } }) -}
91e3ab6273a7f14668e4869cb360a406
  main10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("In order depth first traversal"#) -}
d3f65dd973101b0c7b5630d8f24d4e76
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
413a11672c570e6be9d2ef3147607221
  main2 :: GHC.Base.String
  {- Unfolding: (case Main.main3 of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of ww { GHC.Types.I# ww1 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww1
                                (let {
                                   lvl20 :: [GHC.Types.Char]
                                   = GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showList__2
                                       (GHC.Types.[] @ GHC.Types.Char)
                                 } in
                                 letrec {
                                   showl :: [GHC.Types.Int] -> GHC.Base.String
                                     {- Arity: 1, Strictness: <S,1*U> -}
                                   = \ (ds2 :: [GHC.Types.Int]) ->
                                     case ds2 of wild1 {
                                       [] -> lvl20
                                       : y ys
                                       -> GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__1
                                            (case y of ww2 { GHC.Types.I# ww3 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0#
                                                    ww3
                                                    (showl ys) of ww4 { (#,#) ww5 ww6 ->
                                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }
                                 } in
                                 showl xs) of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 } }) }) -}
ec908c063d54c6e1015107985d4891b3
  main3 :: [GHC.Types.Int]
  {- Unfolding: (Main.bfTransverse1
                   @ GHC.Types.Int
                   Main.main4
                   (GHC.Types.[] @ (Main.BinaryTree GHC.Types.Int))
                   (GHC.Types.[] @ GHC.Types.Int)) -}
bcb4bd2babe93e9dae75c034f0c6f8b9
  main4 :: [Main.BinaryTree GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.BinaryTree GHC.Types.Int)
                   Main.sampleTree
                   (GHC.Types.[] @ (Main.BinaryTree GHC.Types.Int))) -}
357329ac526a59027e8eb8499a212ce1
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main6) -}
7985f939d24e147456a447561db4e3e2
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Breadth first traversal"#) -}
23854b7b7d250326caac5a3d1f1da9a7
  main7 :: GHC.Base.String
  {- Unfolding: (case Main.main8 of wild {
                   []
                   -> GHC.CString.unpackAppendCString#
                        GHC.Show.showList__4
                        (GHC.Types.[] @ GHC.Types.Char)
                   : x xs
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.showList__3
                        (case x of ww { GHC.Types.I# ww1 ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                ww1
                                (let {
                                   lvl20 :: [GHC.Types.Char]
                                   = GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.showList__2
                                       (GHC.Types.[] @ GHC.Types.Char)
                                 } in
                                 letrec {
                                   showl :: [GHC.Types.Int] -> GHC.Base.String
                                     {- Arity: 1, Strictness: <S,1*U> -}
                                   = \ (ds2 :: [GHC.Types.Int]) ->
                                     case ds2 of wild1 {
                                       [] -> lvl20
                                       : y ys
                                       -> GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__1
                                            (case y of ww2 { GHC.Types.I# ww3 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0#
                                                    ww3
                                                    (showl ys) of ww4 { (#,#) ww5 ww6 ->
                                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }
                                 } in
                                 showl xs) of ww2 { (#,#) ww3 ww4 ->
                         GHC.Types.: @ GHC.Types.Char ww3 ww4 } }) }) -}
3333200f85e801e5f3117602d85c02f0
  main8 :: [GHC.Types.Int]
  {- Unfolding: (Main.dfTransverse
                   @ GHC.Types.Int
                   Main.sampleTree) -}
e74affda974b76af18aa08e3464d889b
  main9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main10) -}
895606423a207a5fa6edaed1e12f9a87
  node ::
    Main.BinaryTree a -> a -> Main.BinaryTree a -> Main.BinaryTree a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True) Main.BinaryTree -}
9c3a08ee46f510912a981874edbbbca0
  right :: Main.BinaryTree a -> Main.BinaryTree a
  RecSel Left Main.BinaryTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.BinaryTree a) ->
                 case ds of wild {
                   Main.Leaf -> Main.right1 @ a
                   Main.BinaryTree ds1 ds2 ds3 -> ds3 }) -}
9c3a08ee46f510912a981874edbbbca0
  right1 :: Main.BinaryTree a
  {- Strictness: x -}
0724f6798782af0f5a00d1074697dab2
  sampleTree :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   Main.sampleTree16
                   Main.sampleTree15
                   Main.sampleTree1) -}
6751c1cbf992cfa8a5f7d5b5f2b5abc3
  sampleTree1 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   Main.sampleTree9
                   Main.sampleTree8
                   Main.sampleTree2) -}
4b03e6bb67ba88d09beaf1acdd4d96f8
  sampleTree10 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   (Main.Leaf @ GHC.Types.Int)
                   Main.sampleTree11
                   (Main.Leaf @ GHC.Types.Int)) -}
b22c0d792aadaa3c4fa4294c57f0f696
  sampleTree11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 13#) -}
dae9d67033ef6fcdf1afb6798e60c3fc
  sampleTree12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
3699d5289b9338c2201782f9ce5101b6
  sampleTree13 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   (Main.Leaf @ GHC.Types.Int)
                   Main.sampleTree14
                   (Main.Leaf @ GHC.Types.Int)) -}
158abc1a359c803724235c9ede59d1d1
  sampleTree14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
929a4acd9f76342df3ed50a726aa689a
  sampleTree15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
527d83ab8cca38c7a1f1522eb1632d2a
  sampleTree16 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   Main.sampleTree24
                   Main.sampleTree23
                   Main.sampleTree17) -}
e3572864c5d79d07daccaf80045b8ed3
  sampleTree17 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   Main.sampleTree21
                   Main.sampleTree20
                   Main.sampleTree18) -}
62a9d6d21d3b592e6513e2823239dfdb
  sampleTree18 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   (Main.Leaf @ GHC.Types.Int)
                   Main.sampleTree19
                   (Main.Leaf @ GHC.Types.Int)) -}
282bc52dc60489f25a2569eaee3115fb
  sampleTree19 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
578b428dfcaa66df63ab4a2441a97ee6
  sampleTree2 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   Main.sampleTree6
                   Main.sampleTree5
                   Main.sampleTree3) -}
7dbe036142ba6f5c9f20847dd313d092
  sampleTree20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
3dfad3a879b3ae9b47fad373938db5e9
  sampleTree21 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   (Main.Leaf @ GHC.Types.Int)
                   Main.sampleTree22
                   (Main.Leaf @ GHC.Types.Int)) -}
f0f1897ad177433a058fe2794047f5b3
  sampleTree22 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
38f1cbf4f65666d61fdf28836d109ff0
  sampleTree23 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
c0c88c9c54fe1061a7b4c5580108438e
  sampleTree24 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   Main.sampleTree28
                   Main.sampleTree27
                   Main.sampleTree25) -}
fee90c76d67184427d621cea1e85defc
  sampleTree25 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   (Main.Leaf @ GHC.Types.Int)
                   Main.sampleTree26
                   (Main.Leaf @ GHC.Types.Int)) -}
fbe0c0ef98b377cf867db1ad4ab5b730
  sampleTree26 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
996ebb629e55f67305080d3b56187379
  sampleTree27 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
c5543ad742f96fab72fb5da0676155e5
  sampleTree28 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   (Main.Leaf @ GHC.Types.Int)
                   Main.sampleTree29
                   (Main.Leaf @ GHC.Types.Int)) -}
9e3a45970a2d5706dd05ef391d0b2444
  sampleTree29 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
8a2c27916e2a80cbe95d273d50fb4b32
  sampleTree3 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   (Main.Leaf @ GHC.Types.Int)
                   Main.sampleTree4
                   (Main.Leaf @ GHC.Types.Int)) -}
43dc8578a781ddf73f3fec71ae46e3ba
  sampleTree4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
3c450f626620f79a599651e31819c346
  sampleTree5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
3c11151bfd51bb54efb11a47e461d369
  sampleTree6 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   (Main.Leaf @ GHC.Types.Int)
                   Main.sampleTree7
                   (Main.Leaf @ GHC.Types.Int)) -}
2ef969e7436bfc802808aa20780c456a
  sampleTree7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 14#) -}
437ac1018c78033956b7b08b767967d7
  sampleTree8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
61561eec35b0bcd982946c9bd4199ea7
  sampleTree9 :: Main.BinaryTree GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.BinaryTree
                   @ GHC.Types.Int
                   Main.sampleTree13
                   Main.sampleTree12
                   Main.sampleTree10) -}
23df23688f58cd0350bb0dd5e8354810
  singleton :: a -> Main.BinaryTree a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: a) ->
                 Main.BinaryTree @ a (Main.Leaf @ a) x (Main.Leaf @ a)) -}
9c3a08ee46f510912a981874edbbbca0
  val :: Main.BinaryTree a -> a
  RecSel Left Main.BinaryTree
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Main.BinaryTree a) ->
                 case ds of wild {
                   Main.Leaf -> Main.val1 @ a Main.BinaryTree ds1 ds2 ds3 -> ds2 }) -}
f762c3034805bad54746567aa8be0daa
  val1 :: a
  {- Strictness: x -}
instance [safe] GHC.Show.Show [Main.BinaryTree]
  = Main.$fShowBinaryTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

