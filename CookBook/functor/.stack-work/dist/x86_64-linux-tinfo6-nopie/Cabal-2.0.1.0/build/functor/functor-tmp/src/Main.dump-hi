
==================== FINAL INTERFACE ====================
2018-04-06 09:30:01.080934452 UTC

interface main:Main 8022
  interface hash: 238bf1785244aa543ab2381d41db32f9
  ABI hash: 38c061e3ce2946186add40975f368a28
  export-list hash: 0d96f23448b3c0166249ade68bfe67f2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 212e3f562e70942f6d5e571fc9366d21
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.double
  Main.main
  Main.square
  Main.squareEither
  Main.squareList
  Main.squareMaybe
  Main.Function{Main.Function}
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Either d7dae5d9bf298dee616e465c14b5d60e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
b2148da49239498bcf3d93c00d748806
  $fFunctorFunction :: GHC.Base.Functor (Main.Function a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Main.Function a)
                  (Main.$fFunctorFunction2 @ a)
                    `cast`
                  (forall (a1 :: <*>_N) (b :: <*>_N).
                   <a1 -> b>_R
                   ->_R <Main.Function a a1>_R
                   ->_R Sym (Main.N:Function[0]) <a>_N <b>_N)
                  (Main.$fFunctorFunction1 @ a)
                    `cast`
                  (forall (a1 :: <*>_N) (b :: <*>_N).
                   <a1>_R
                   ->_R <Main.Function a b>_R
                   ->_R Sym (Main.N:Function[0]) <a>_N <a1>_N) -}
b2148da49239498bcf3d93c00d748806
  $fFunctorFunction1 :: a2 -> Main.Function a1 b -> a1 -> a2
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a @ a1 @ b (x :: a1) (eta :: Main.Function a b) (eta1 :: a) ->
                 x) -}
b2148da49239498bcf3d93c00d748806
  $fFunctorFunction2 :: (a2 -> b) -> Main.Function a1 a2 -> a1 -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a @ a1 @ b (f :: a1 -> b) (ds :: Main.Function a a1) ->
                 GHC.Base..
                   @ a1
                   @ b
                   @ a
                   f
                   ds `cast` (Main.N:Function[0] <a>_N <a1>_N)) -}
9bf85abeef6cc246326fac0cc3121550
  $tc'Function :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14472316159388267676##
                   16437256128868899531##
                   Main.$trModule
                   Main.$tc'Function2
                   2#
                   Main.$tc'Function1) -}
4cfb3c03a44ff4e5145f8864bb66bfa4
  $tc'Function1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e7b32a3aea8ee87ee4f2cdef900cfca7
  $tc'Function2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Function3) -}
7cc16a8dae53bc7b492d3693533ba282
  $tc'Function3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Function"#) -}
4008a55013edbab746ab2651d28bd6ab
  $tcFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11915308866586617820##
                   9642431847734445787##
                   Main.$trModule
                   Main.$tcFunction1
                   0#
                   GHC.Types.krep$*->*->*) -}
d5d871488c7fbcc979c52e722636de0f
  $tcFunction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcFunction2) -}
5b653ff7d485e135ee5c195c8833a215
  $tcFunction2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Function"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b2148da49239498bcf3d93c00d748806
  newtype Function a b = Function (a -> b)
13dc934558143e3dd0db86cc6e95ad37
  double :: GHC.Num.Num a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLLLL),1*U(1*C1(C1(U)),A,A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) ->
                 GHC.Num.+ @ a $dNum x x) -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
5510fa2cfc7989247ee295903c8707a0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
cfec91c1458e0838bca394ca5ba6c25a
  square :: GHC.Num.Num a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLL),1*U(A,A,1*C1(C1(U)),A,A,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) ->
                 GHC.Num.* @ a $dNum x x) -}
028129492eeae50db6f3bb1c611db2b5
  squareEither ::
    GHC.Num.Num a => Data.Either.Either c a -> Data.Either.Either c a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ c
                   ($dNum :: GHC.Num.Num a)
                   (x :: Data.Either.Either c a) ->
                 case x of wild {
                   Data.Either.Left x1 -> Data.Either.Left @ c @ a x1
                   Data.Either.Right y
                   -> Data.Either.Right @ c @ a (Main.square @ a $dNum y) }) -}
bbe0543833f77c1350bde1ad928247de
  squareList :: GHC.Num.Num a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (xs :: [a]) ->
                 GHC.Base.build
                   @ a
                   (\ @ b1 (c :: a -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b1
                      (GHC.Base.mapFB @ a @ b1 @ a c (Main.square @ a $dNum))
                      n
                      xs)) -}
de58bf4f6b011fa2f870976917df0a06
  squareMaybe ::
    GHC.Num.Num a => GHC.Base.Maybe a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: GHC.Base.Maybe a) ->
                 case x of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just a1
                   -> GHC.Base.Just @ a (Main.square @ a $dNum a1) }) -}
instance [safe] GHC.Base.Functor [Main.Function]
  = Main.$fFunctorFunction
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

